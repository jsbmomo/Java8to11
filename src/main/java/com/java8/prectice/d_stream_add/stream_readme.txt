Stream

- java8 버전에 추가되었으며, 람다를 활용할 수 있는 기능
- 배열 또는 컬렉션 프레임워크 인터페이스의 클래스를 여러 개 조합하여 원하는 결과를 얻을 수 있음.
- 스트림은 선언(생성), 가공, 반환 3가지로 구분할 수 있음(크게 의미있진 않음).
- 함수형 프로그래밍으로 간결하고 가독성이 좋아진다.
- 병렬처리를 간편하게 설정할 수 있기에 성능을 향상시킬 수 있음.
- 최근 부각되고 있는 reactive programming에서 사용되는 reactor를 잘 사용하기 위해 스트림에 대한 이해가 필요.
  > Reactor는 Reactive Streams 명세를 기반으로 non-blocking 앱을 개발하기 위한 자바 라이브러리

* Stream은 항상 사용하는 것이 좋을까?
 - 충분히 큰 사이즈의 컬렉션을 다루는 작업이라면 스트림의 성능 이점이 있다.
 - 병렬 처리는 split하기 쉬운(분할처리가 쉬운) 컬렉션이어야 의미 있음.
 - 병렬 처리를 위해서는 하나의 스레드를 쪼개는 작업을 수행하는데, 이 때 큰 오버헤드 비용이 발생
   > fork-join framework를 기반으로 쓰레드를 나누게 됨.
   > 여기에서 말하는 병렬처리는 스레드 풀처럼 스레드를 하나씩 가져오는 것이 아닌 하나의 스레드를 쪼개서 스케줄링하는 작업이라 비용이 많이 든다.
   > stream은 원본 데이터를 건드리지 않고 새로 메모리에 올리는 작업을 수행
   > 일찍 early return 할 수 있는 상황이면 for 문 사용을 고려하는 것이 좋다.
 - https://velog.io/@injoon2019/스트림은-항상-좋을까


스트림의 생성 방법
 - 컬렉션 스트림
 - 기본 타입형 스트림
 - 문자열 스트림
 - 병렬 스트림(Parallel Stream)
 - 스트림 연결하기
 - Stream.builder()
 - Stream.generate()
 - Stream.iterate()
 - and other things










